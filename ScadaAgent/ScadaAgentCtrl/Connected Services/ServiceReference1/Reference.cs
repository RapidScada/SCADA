//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Scada.Agent.Ctrl.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.AgentSvc")]
    public interface AgentSvc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/CreateSession", ReplyAction="http://tempuri.org/AgentSvc/CreateSessionResponse")]
        Scada.Agent.Ctrl.ServiceReference1.CreateSessionResponse CreateSession(Scada.Agent.Ctrl.ServiceReference1.CreateSessionRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/CreateSession", ReplyAction="http://tempuri.org/AgentSvc/CreateSessionResponse")]
        System.Threading.Tasks.Task<Scada.Agent.Ctrl.ServiceReference1.CreateSessionResponse> CreateSessionAsync(Scada.Agent.Ctrl.ServiceReference1.CreateSessionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/Login", ReplyAction="http://tempuri.org/AgentSvc/LoginResponse")]
        bool Login(long sessionID, string username, string encryptedPassword, string scadaInstanceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/Login", ReplyAction="http://tempuri.org/AgentSvc/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(long sessionID, string username, string encryptedPassword, string scadaInstanceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/ControlService", ReplyAction="http://tempuri.org/AgentSvc/ControlServiceResponse")]
        bool ControlService(long sessionID, Scada.Agent.ServiceApp serviceApp, Scada.Agent.ServiceCommand command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/ControlService", ReplyAction="http://tempuri.org/AgentSvc/ControlServiceResponse")]
        System.Threading.Tasks.Task<bool> ControlServiceAsync(long sessionID, Scada.Agent.ServiceApp serviceApp, Scada.Agent.ServiceCommand command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/GetServiceStatus", ReplyAction="http://tempuri.org/AgentSvc/GetServiceStatusResponse")]
        Scada.Agent.Ctrl.ServiceReference1.GetServiceStatusResponse GetServiceStatus(Scada.Agent.Ctrl.ServiceReference1.GetServiceStatusRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/GetServiceStatus", ReplyAction="http://tempuri.org/AgentSvc/GetServiceStatusResponse")]
        System.Threading.Tasks.Task<Scada.Agent.Ctrl.ServiceReference1.GetServiceStatusResponse> GetServiceStatusAsync(Scada.Agent.Ctrl.ServiceReference1.GetServiceStatusRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/GetAvailableConfig", ReplyAction="http://tempuri.org/AgentSvc/GetAvailableConfigResponse")]
        Scada.Agent.Ctrl.ServiceReference1.GetAvailableConfigResponse GetAvailableConfig(Scada.Agent.Ctrl.ServiceReference1.GetAvailableConfigRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/GetAvailableConfig", ReplyAction="http://tempuri.org/AgentSvc/GetAvailableConfigResponse")]
        System.Threading.Tasks.Task<Scada.Agent.Ctrl.ServiceReference1.GetAvailableConfigResponse> GetAvailableConfigAsync(Scada.Agent.Ctrl.ServiceReference1.GetAvailableConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/DownloadConfig", ReplyAction="http://tempuri.org/AgentSvc/DownloadConfigResponse")]
        System.IO.Stream DownloadConfig(long sessionID, Scada.Agent.ConfigOptions configOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/DownloadConfig", ReplyAction="http://tempuri.org/AgentSvc/DownloadConfigResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadConfigAsync(long sessionID, Scada.Agent.ConfigOptions configOptions);
        
        // CODEGEN: Generating message contract since the operation UploadConfig is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/UploadConfig", ReplyAction="http://tempuri.org/AgentSvc/UploadConfigResponse")]
        Scada.Agent.Ctrl.ServiceReference1.UploadConfigResponse UploadConfig(Scada.Agent.Ctrl.ServiceReference1.ConfigUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/UploadConfig", ReplyAction="http://tempuri.org/AgentSvc/UploadConfigResponse")]
        System.Threading.Tasks.Task<Scada.Agent.Ctrl.ServiceReference1.UploadConfigResponse> UploadConfigAsync(Scada.Agent.Ctrl.ServiceReference1.ConfigUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/FindFiles", ReplyAction="http://tempuri.org/AgentSvc/FindFilesResponse")]
        Scada.Agent.Ctrl.ServiceReference1.FindFilesResponse FindFiles(Scada.Agent.Ctrl.ServiceReference1.FindFilesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/FindFiles", ReplyAction="http://tempuri.org/AgentSvc/FindFilesResponse")]
        System.Threading.Tasks.Task<Scada.Agent.Ctrl.ServiceReference1.FindFilesResponse> FindFilesAsync(Scada.Agent.Ctrl.ServiceReference1.FindFilesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/DownloadFile", ReplyAction="http://tempuri.org/AgentSvc/DownloadFileResponse")]
        System.IO.Stream DownloadFile(long sessionID, Scada.Agent.RelPath relPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/DownloadFile", ReplyAction="http://tempuri.org/AgentSvc/DownloadFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(long sessionID, Scada.Agent.RelPath relPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/DownloadFileRest", ReplyAction="http://tempuri.org/AgentSvc/DownloadFileRestResponse")]
        System.IO.Stream DownloadFileRest(long sessionID, Scada.Agent.RelPath relPath, long position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgentSvc/DownloadFileRest", ReplyAction="http://tempuri.org/AgentSvc/DownloadFileRestResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileRestAsync(long sessionID, Scada.Agent.RelPath relPath, long position);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateSession", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateSessionRequest {
        
        public CreateSessionRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateSessionResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateSessionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool CreateSessionResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long sessionID;
        
        public CreateSessionResponse() {
        }
        
        public CreateSessionResponse(bool CreateSessionResult, long sessionID) {
            this.CreateSessionResult = CreateSessionResult;
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceStatus", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetServiceStatusRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Scada.Agent.ServiceApp serviceApp;
        
        public GetServiceStatusRequest() {
        }
        
        public GetServiceStatusRequest(long sessionID, Scada.Agent.ServiceApp serviceApp) {
            this.sessionID = sessionID;
            this.serviceApp = serviceApp;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceStatusResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetServiceStatusResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetServiceStatusResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool isRunning;
        
        public GetServiceStatusResponse() {
        }
        
        public GetServiceStatusResponse(bool GetServiceStatusResult, bool isRunning) {
            this.GetServiceStatusResult = GetServiceStatusResult;
            this.isRunning = isRunning;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAvailableConfig", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAvailableConfigRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long sessionID;
        
        public GetAvailableConfigRequest() {
        }
        
        public GetAvailableConfigRequest(long sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAvailableConfigResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAvailableConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetAvailableConfigResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Scada.Agent.ConfigParts configParts;
        
        public GetAvailableConfigResponse() {
        }
        
        public GetAvailableConfigResponse(bool GetAvailableConfigResult, Scada.Agent.ConfigParts configParts) {
            this.GetAvailableConfigResult = GetAvailableConfigResult;
            this.configParts = configParts;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConfigUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ConfigUploadMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public Scada.Agent.ConfigOptions ConfigOptions;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long SessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream Stream;
        
        public ConfigUploadMessage() {
        }
        
        public ConfigUploadMessage(Scada.Agent.ConfigOptions ConfigOptions, long SessionID, System.IO.Stream Stream) {
            this.ConfigOptions = ConfigOptions;
            this.SessionID = SessionID;
            this.Stream = Stream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadConfigResponse {
        
        public UploadConfigResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindFiles", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FindFilesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Scada.Agent.RelPath relPath;
        
        public FindFilesRequest() {
        }
        
        public FindFilesRequest(long sessionID, Scada.Agent.RelPath relPath) {
            this.sessionID = sessionID;
            this.relPath = relPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindFilesResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FindFilesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool FindFilesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string[] paths;
        
        public FindFilesResponse() {
        }
        
        public FindFilesResponse(bool FindFilesResult, string[] paths) {
            this.FindFilesResult = FindFilesResult;
            this.paths = paths;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface AgentSvcChannel : Scada.Agent.Ctrl.ServiceReference1.AgentSvc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AgentSvcClient : System.ServiceModel.ClientBase<Scada.Agent.Ctrl.ServiceReference1.AgentSvc>, Scada.Agent.Ctrl.ServiceReference1.AgentSvc {
        
        public AgentSvcClient() {
        }
        
        public AgentSvcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AgentSvcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AgentSvcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AgentSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Scada.Agent.Ctrl.ServiceReference1.CreateSessionResponse Scada.Agent.Ctrl.ServiceReference1.AgentSvc.CreateSession(Scada.Agent.Ctrl.ServiceReference1.CreateSessionRequest request) {
            return base.Channel.CreateSession(request);
        }
        
        public bool CreateSession(out long sessionID) {
            Scada.Agent.Ctrl.ServiceReference1.CreateSessionRequest inValue = new Scada.Agent.Ctrl.ServiceReference1.CreateSessionRequest();
            Scada.Agent.Ctrl.ServiceReference1.CreateSessionResponse retVal = ((Scada.Agent.Ctrl.ServiceReference1.AgentSvc)(this)).CreateSession(inValue);
            sessionID = retVal.sessionID;
            return retVal.CreateSessionResult;
        }
        
        public System.Threading.Tasks.Task<Scada.Agent.Ctrl.ServiceReference1.CreateSessionResponse> CreateSessionAsync(Scada.Agent.Ctrl.ServiceReference1.CreateSessionRequest request) {
            return base.Channel.CreateSessionAsync(request);
        }
        
        public bool Login(long sessionID, string username, string encryptedPassword, string scadaInstanceName) {
            return base.Channel.Login(sessionID, username, encryptedPassword, scadaInstanceName);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(long sessionID, string username, string encryptedPassword, string scadaInstanceName) {
            return base.Channel.LoginAsync(sessionID, username, encryptedPassword, scadaInstanceName);
        }
        
        public bool ControlService(long sessionID, Scada.Agent.ServiceApp serviceApp, Scada.Agent.ServiceCommand command) {
            return base.Channel.ControlService(sessionID, serviceApp, command);
        }
        
        public System.Threading.Tasks.Task<bool> ControlServiceAsync(long sessionID, Scada.Agent.ServiceApp serviceApp, Scada.Agent.ServiceCommand command) {
            return base.Channel.ControlServiceAsync(sessionID, serviceApp, command);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Scada.Agent.Ctrl.ServiceReference1.GetServiceStatusResponse Scada.Agent.Ctrl.ServiceReference1.AgentSvc.GetServiceStatus(Scada.Agent.Ctrl.ServiceReference1.GetServiceStatusRequest request) {
            return base.Channel.GetServiceStatus(request);
        }
        
        public bool GetServiceStatus(long sessionID, Scada.Agent.ServiceApp serviceApp, out bool isRunning) {
            Scada.Agent.Ctrl.ServiceReference1.GetServiceStatusRequest inValue = new Scada.Agent.Ctrl.ServiceReference1.GetServiceStatusRequest();
            inValue.sessionID = sessionID;
            inValue.serviceApp = serviceApp;
            Scada.Agent.Ctrl.ServiceReference1.GetServiceStatusResponse retVal = ((Scada.Agent.Ctrl.ServiceReference1.AgentSvc)(this)).GetServiceStatus(inValue);
            isRunning = retVal.isRunning;
            return retVal.GetServiceStatusResult;
        }
        
        public System.Threading.Tasks.Task<Scada.Agent.Ctrl.ServiceReference1.GetServiceStatusResponse> GetServiceStatusAsync(Scada.Agent.Ctrl.ServiceReference1.GetServiceStatusRequest request) {
            return base.Channel.GetServiceStatusAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Scada.Agent.Ctrl.ServiceReference1.GetAvailableConfigResponse Scada.Agent.Ctrl.ServiceReference1.AgentSvc.GetAvailableConfig(Scada.Agent.Ctrl.ServiceReference1.GetAvailableConfigRequest request) {
            return base.Channel.GetAvailableConfig(request);
        }
        
        public bool GetAvailableConfig(long sessionID, out Scada.Agent.ConfigParts configParts) {
            Scada.Agent.Ctrl.ServiceReference1.GetAvailableConfigRequest inValue = new Scada.Agent.Ctrl.ServiceReference1.GetAvailableConfigRequest();
            inValue.sessionID = sessionID;
            Scada.Agent.Ctrl.ServiceReference1.GetAvailableConfigResponse retVal = ((Scada.Agent.Ctrl.ServiceReference1.AgentSvc)(this)).GetAvailableConfig(inValue);
            configParts = retVal.configParts;
            return retVal.GetAvailableConfigResult;
        }
        
        public System.Threading.Tasks.Task<Scada.Agent.Ctrl.ServiceReference1.GetAvailableConfigResponse> GetAvailableConfigAsync(Scada.Agent.Ctrl.ServiceReference1.GetAvailableConfigRequest request) {
            return base.Channel.GetAvailableConfigAsync(request);
        }
        
        public System.IO.Stream DownloadConfig(long sessionID, Scada.Agent.ConfigOptions configOptions) {
            return base.Channel.DownloadConfig(sessionID, configOptions);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadConfigAsync(long sessionID, Scada.Agent.ConfigOptions configOptions) {
            return base.Channel.DownloadConfigAsync(sessionID, configOptions);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Scada.Agent.Ctrl.ServiceReference1.UploadConfigResponse Scada.Agent.Ctrl.ServiceReference1.AgentSvc.UploadConfig(Scada.Agent.Ctrl.ServiceReference1.ConfigUploadMessage request) {
            return base.Channel.UploadConfig(request);
        }
        
        public void UploadConfig(Scada.Agent.ConfigOptions ConfigOptions, long SessionID, System.IO.Stream Stream) {
            Scada.Agent.Ctrl.ServiceReference1.ConfigUploadMessage inValue = new Scada.Agent.Ctrl.ServiceReference1.ConfigUploadMessage();
            inValue.ConfigOptions = ConfigOptions;
            inValue.SessionID = SessionID;
            inValue.Stream = Stream;
            Scada.Agent.Ctrl.ServiceReference1.UploadConfigResponse retVal = ((Scada.Agent.Ctrl.ServiceReference1.AgentSvc)(this)).UploadConfig(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Scada.Agent.Ctrl.ServiceReference1.UploadConfigResponse> Scada.Agent.Ctrl.ServiceReference1.AgentSvc.UploadConfigAsync(Scada.Agent.Ctrl.ServiceReference1.ConfigUploadMessage request) {
            return base.Channel.UploadConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Scada.Agent.Ctrl.ServiceReference1.UploadConfigResponse> UploadConfigAsync(Scada.Agent.ConfigOptions ConfigOptions, long SessionID, System.IO.Stream Stream) {
            Scada.Agent.Ctrl.ServiceReference1.ConfigUploadMessage inValue = new Scada.Agent.Ctrl.ServiceReference1.ConfigUploadMessage();
            inValue.ConfigOptions = ConfigOptions;
            inValue.SessionID = SessionID;
            inValue.Stream = Stream;
            return ((Scada.Agent.Ctrl.ServiceReference1.AgentSvc)(this)).UploadConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Scada.Agent.Ctrl.ServiceReference1.FindFilesResponse Scada.Agent.Ctrl.ServiceReference1.AgentSvc.FindFiles(Scada.Agent.Ctrl.ServiceReference1.FindFilesRequest request) {
            return base.Channel.FindFiles(request);
        }
        
        public bool FindFiles(long sessionID, Scada.Agent.RelPath relPath, out string[] paths) {
            Scada.Agent.Ctrl.ServiceReference1.FindFilesRequest inValue = new Scada.Agent.Ctrl.ServiceReference1.FindFilesRequest();
            inValue.sessionID = sessionID;
            inValue.relPath = relPath;
            Scada.Agent.Ctrl.ServiceReference1.FindFilesResponse retVal = ((Scada.Agent.Ctrl.ServiceReference1.AgentSvc)(this)).FindFiles(inValue);
            paths = retVal.paths;
            return retVal.FindFilesResult;
        }
        
        public System.Threading.Tasks.Task<Scada.Agent.Ctrl.ServiceReference1.FindFilesResponse> FindFilesAsync(Scada.Agent.Ctrl.ServiceReference1.FindFilesRequest request) {
            return base.Channel.FindFilesAsync(request);
        }
        
        public System.IO.Stream DownloadFile(long sessionID, Scada.Agent.RelPath relPath) {
            return base.Channel.DownloadFile(sessionID, relPath);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(long sessionID, Scada.Agent.RelPath relPath) {
            return base.Channel.DownloadFileAsync(sessionID, relPath);
        }
        
        public System.IO.Stream DownloadFileRest(long sessionID, Scada.Agent.RelPath relPath, long position) {
            return base.Channel.DownloadFileRest(sessionID, relPath, position);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadFileRestAsync(long sessionID, Scada.Agent.RelPath relPath, long position) {
            return base.Channel.DownloadFileRestAsync(sessionID, relPath, position);
        }
    }
}
